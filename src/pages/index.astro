---
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <div class="op1-drum-machine">
    <h1>Drum Machine</h1>
    
    <!-- BPM Control -->
    <div class="bpm-control">
      <label for="bpm">BPM:</label>
      <input type="number" id="bpm" value="120" min="40" max="300" />
      <button id="playBtn">Play</button>
      <!-- NEW Share Button -->
      <button id="shareBtn">Share</button>
    </div>
    
    <!-- Sequencer (7 rows) -->
    <div class="sequencer">
      
      <!-- 1) Kick Row -->
      <div class="sequence-row">
        <div class="instrument-label">Kick</div>
        <div class="all-steps">
          <div class="steps" data-instrument="kick">
            <!-- 16 steps -->
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>

      <!-- 2) Snare -->
      <div class="sequence-row">
        <div class="instrument-label">Snare</div>
        <div class="all-steps">
          <div class="steps" data-instrument="snare">
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>

      <!-- 3) Hi-Hat -->
      <div class="sequence-row">
        <div class="instrument-label">Hi-Hat</div>
        <div class="all-steps">
          <div class="steps" data-instrument="hi_hat">
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>

      <!-- 4) Clap -->
      <div class="sequence-row">
        <div class="instrument-label">Clap</div>
        <div class="all-steps">
          <div class="steps" data-instrument="clap">
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>

      <!-- 5) Gun Cocked -->
      <div class="sequence-row">
        <div class="instrument-label">Gun Cocked</div>
        <div class="all-steps">
          <div class="steps" data-instrument="gunCocked">
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>

      <!-- 6) Gun Shot -->
      <div class="sequence-row">
        <div class="instrument-label">Shot</div>
        <div class="all-steps">
          <div class="steps" data-instrument="gunShot">
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>

      <!-- 7) Church Bell -->
      <div class="sequence-row">
        <div class="instrument-label">Church Bell</div>
        <div class="all-steps">
          <div class="steps" data-instrument="churchBell">
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>
    </div>

    <p class="warning">This is buggy, refresh the page if the drum machine stops playing.</p>
  </div>
</Layout>

<style>
/* Same CSS as your existing version */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  background-color: #333;
  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
  color: #fff;
  width: 100%;
  min-height: 100vh;
}

.op1-drum-machine {
  width: 100%;
  margin: 0;
  padding: 0;
  background-color: #333;
  border: none;
  border-radius: 0;
  box-shadow: none;
}

.op1-drum-machine h1 {
  text-align: center;
  margin: 0.5rem 0;
}

.bpm-control {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0.5rem 0;
  flex-wrap: wrap;
}

.bpm-control label {
  margin-right: 8px;
}

#bpm {
  width: 60px;
  text-align: center;
  margin-right: 12px;
  background-color: #555;
  color: #fff;
  border: 1px solid #888;
  border-radius: 4px;
}

#playBtn {
  background-color: #f57e7e;
  border: 2px solid #e05353;
  border-radius: 6px;
  cursor: pointer;
  color: #fff;
  padding: 6px 12px;
}

#shareBtn {
  background-color: #8bbcf5;
  border: 2px solid #5490e0;
  border-radius: 6px;
  cursor: pointer;
  color: #fff;
  padding: 6px 12px;
  margin-left: 8px;
}

.warning {
  padding: 10px;
  margin-top: 40px;
  text-align: center;
}

.sequencer {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  max-width: 1100px;
  margin: 0 auto;
}

.sequence-row {
  display: grid;
  grid-template-columns: auto 1fr;
  align-items: center;
  gap: 0;
  max-height: 100px;
}

.instrument-label {
  width: 30px;
  display: flex;
  justify-content: center;
  align-items: center;
  transform: rotate(-90deg);
  transform-origin: center;
  white-space: nowrap;
  font-weight: bold;
  background-color: transparent;
  min-height: 50px;
  padding: 0.5rem 0;
  text-align: center;
}

.all-steps {
  width: 100%;
}

.steps {
  display: grid;
  grid-template-columns: repeat(16, 1fr);
  gap: 2px;
  width: 100%;
}

.step {
  background-color: #444;
  border: 2px solid #666;
  cursor: pointer;
  aspect-ratio: 1 / 1;
  transition: background-color 0.1s ease, border-color 0.1s ease, outline 0.1s ease;
}

.step:nth-child(4n+1) {
  background-color: #3a3a3a;
}

.step.active {
  background-color: #5fa86b;
  border-color: #7dbe8a;
}

.step.active:nth-child(4n+1) {
  background-color: #529a60;
}

.step.playing {
  outline: 2px solid #ff8b00;
  outline-offset: -2px;
}

@media (max-width: 600px) {
  .steps {
    grid-template-columns: repeat(8, 1fr);
    gap: 0;
  }

  .instrument-label {
    width: 40px;
    min-height: 50px;
  }
}
</style>
<script>
  /************************************************
   * script.js — Using Base64 for a shorter share URL
   ************************************************/
  
  let audioCtx;
  try {
    audioCtx = new (window.AudioContext || window.webkitAudioContext)();
  } catch (e) {
    alert('Web Audio API not supported in this browser');
  }
  
  /** 
   * 1) Sample URLs for 7 instruments 
   * (Adjust to your actual filenames)
   */
  const sampleURLs = {
    kick:      'kick.wav',
    snare:     'snare.wav',
    hihat:     'hi_hat.wav',
    clap:      'clap.wav',
    gunCocked: 'gun_cocked.wav',
    gunShot:   'gun_shot.wav',
    churchBell:'church_bell.wav'
  };
  
  /** 
   * 2) We'll decode each sample into an AudioBuffer
   */
  const audioBuffers = {};
  
  async function loadAllSamples() {
    const instruments = Object.keys(sampleURLs);
    for (let instr of instruments) {
      const url = sampleURLs[instr];
      const audioData = await fetch(url).then(r => r.arrayBuffer());
      audioBuffers[instr] = await audioCtx.decodeAudioData(audioData);
    }
  }
  
  /** 
   * 3) DOM Elements 
   */
  const bpmInput   = document.getElementById('bpm');
  const playBtn    = document.getElementById('playBtn');
  const shareBtn   = document.getElementById('shareBtn');
  const stepContainers = document.querySelectorAll('.steps');
  
  /** 
   * 4) Sequencer State 
   */
  let isPlaying    = false;
  let current16th  = 0;      // which step [0..15]
  let nextNoteTime = 0;      // when to schedule next note in audioCtx time
  let rafID        = 0;      // for requestAnimationFrame
  const scheduleAheadTime = 0.1; // schedule 100ms ahead
  
  /**
   * 5) On Page Load
   *    - Load samples
   *    - Parse any URL param => set .active steps
   */
  window.addEventListener('load', async () => {
    playBtn.disabled = true;
    shareBtn.disabled = true;
    await loadAllSamples();
    console.log('All samples loaded.');
    playBtn.disabled = false;
    shareBtn.disabled = false;
  
    loadFromURLParams(); // parse 'bpm' + 'b' param => restore pattern
  });
  
  /**
   * 6) Web Audio Sequencer
   */
  playBtn.addEventListener('click', () => {
    if (!isPlaying) {
      startSequencer();
    } else {
      stopSequencer();
    }
  });
  
  function startSequencer() {
    if (audioCtx.state === 'suspended') {
      audioCtx.resume();
    }
    isPlaying = true;
    playBtn.textContent = 'Stop';
    current16th = 0;
    nextNoteTime = audioCtx.currentTime;
    schedulerLoop();
  }
  
  function stopSequencer() {
    isPlaying = false;
    playBtn.textContent = 'Play';
    cancelAnimationFrame(rafID);
    clearPlayingHighlight();
  }
  
  function schedulerLoop() {
    while (nextNoteTime < audioCtx.currentTime + scheduleAheadTime) {
      scheduleStep(current16th, nextNoteTime);
      nextNote();
    }
    if (isPlaying) {
      rafID = requestAnimationFrame(schedulerLoop);
    }
  }
  
  function nextNote() {
    const bpm = parseFloat(bpmInput.value) || 120;
    const secPerBeat = 60.0 / bpm;
    const secPer16th = secPerBeat / 4;
    nextNoteTime += secPer16th;
    current16th = (current16th + 1) % 16;
  }
  
  function scheduleStep(stepIndex, time) {
    stepContainers.forEach(container => {
      const instrument = container.getAttribute('data-instrument');
      const stepDiv    = container.querySelector(`[data-step="${stepIndex}"]`);
      if (stepDiv && stepDiv.classList.contains('active')) {
        playBuffer(instrument, time);
      }
    });
  
    const delayMs = (time - audioCtx.currentTime) * 1000;
    setTimeout(() => highlightStep(stepIndex), delayMs);
  }
  
  function playBuffer(instrument, when) {
    const buffer = audioBuffers[instrument];
    if (!buffer) return;
  
    const source = audioCtx.createBufferSource();
    source.buffer = buffer;
    source.connect(audioCtx.destination);
    source.start(when);
  }
  
  function highlightStep(stepIndex) {
    clearPlayingHighlight();
    document.querySelectorAll(`[data-step="${stepIndex}"]`).forEach(el => {
      el.classList.add('playing');
    });
  }
  
  function clearPlayingHighlight() {
    document.querySelectorAll('.step.playing').forEach(el => {
      el.classList.remove('playing');
    });
  }
  
  /** 
   * 7) Step Click => Toggle .active
   */
  document.querySelectorAll('.step').forEach(step => {
    step.addEventListener('click', () => {
      step.classList.toggle('active');
    });
  });
  
  /************************************************
   * 8) Base64-Sharing Logic
   ************************************************/
  
  /**
   * Utility: patternToBytes() 
   *   e.g. "1010000010100001" => 2 bytes (hi, lo)
   */
  function patternToBytes(patternStr) {
    const dec = parseInt(patternStr, 2); // parse binary
    const hi  = (dec >> 8) & 0xFF;       // top 8 bits
    const lo  = dec & 0xFF;             // bottom 8 bits
    return [hi, lo];
  }
  
  /**
   * Utility: bytesToPattern(hi, lo) 
   *   e.g. (160, 161) => "1010000010100001"
   */
  function bytesToPattern(hi, lo) {
    const dec = (hi << 8) | lo;
    let bin = dec.toString(2);
    return bin.padStart(16, '0');
  }
  
  /**
   * Utility: arrayBufferToBase64(arrayBuffer)
   */
  function arrayBufferToBase64(ab) {
    let binary = '';
    const bytes = new Uint8Array(ab);
    for (let i = 0; i < bytes.length; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return btoa(binary);
  }
  
  /**
   * Utility: base64ToArrayBuffer(base64)
   */
  function base64ToArrayBuffer(b64) {
    const binary = atob(b64);
    const len = binary.length;
    const bytes = new Uint8Array(len);
    for (let i = 0; i < len; i++) {
      bytes[i] = binary.charCodeAt(i);
    }
    return bytes.buffer;
  }
  
  /**
   * Our 7 instruments in a known order
   */
  const instrumentsOrder = [
    'kick','snare','hi_hat','clap','gunCocked','gunShot','churchBell'
  ];
  
  /**
   * SHARE:
   *  - Gather BPM
   *  - For each instrument, build 16-bit pattern => 2 bytes
   *  - Put them all in a single byte array => Base64 => param b=
   *  - e.g. ?bpm=120&b=ABCD123...
   */
  shareBtn.addEventListener('click', () => {
    const bpmVal = parseInt(bpmInput.value) || 120;
  
    // 7 instruments => 14 bytes total
    // (2 bytes per instrument pattern)
    const data = new Uint8Array(14);
    let offset = 0;
  
    instrumentsOrder.forEach(instr => {
      // build 16-char '0/1' pattern
      const container = document.querySelector(`.steps[data-instrument="${instr}"]`);
      let patternStr = '';
      for (let i = 0; i < 16; i++) {
        const stepDiv = container.querySelector(`[data-step="${i}"]`);
        patternStr += stepDiv.classList.contains('active') ? '1' : '0';
      }
      const [hi, lo] = patternToBytes(patternStr);
      data[offset++] = hi;
      data[offset++] = lo;
    });
  
    // Base64-encode the 14-byte array
    const b64 = arrayBufferToBase64(data.buffer);
  
    // Build final URL
    const domain = "https://drumkit-black-kappa.vercel.app";
    const params = new URLSearchParams();
    params.set('bpm', bpmVal.toString());
    params.set('b', b64);
  
    const newUrl = domain + window.location.pathname + "?" + params.toString();
    prompt("Copy your shareable link:", newUrl);
  });
  
  /************************************************
   * loadFromURLParams():
   *  - read ?bpm=... 
   *  - read ?b=Base64 => decode => set .active
   ************************************************/
  function loadFromURLParams() {
    const params = new URLSearchParams(window.location.search);
  
    // BPM
    if (params.has('bpm')) {
      bpmInput.value = params.get('bpm');
    }
  
    // Base64 pattern param
    if (params.has('b')) {
      const b64 = params.get('b');
      // decode => ArrayBuffer => 14 bytes => each instrument
      const ab = base64ToArrayBuffer(b64);
      const data = new Uint8Array(ab);
      if (data.length !== 14) {
        console.warn('Unexpected data length, skipping load');
        return;
      }
  
      let offset = 0;
      instrumentsOrder.forEach(instr => {
        const container = document.querySelector(`.steps[data-instrument="${instr}"]`);
        if (!container) {
          // doesn't exist in DOM
          offset += 2;
          return;
        }
        // read 2 bytes => 16-bit pattern
        const hi = data[offset++];
        const lo = data[offset++];
        const patternStr = bytesToPattern(hi, lo);
  
        for (let i = 0; i < 16; i++) {
          const stepDiv = container.querySelector(`[data-step="${i}"]`);
          if (!stepDiv) continue;
          if (patternStr[i] === '1') {
            stepDiv.classList.add('active');
          } else {
            stepDiv.classList.remove('active');
          }
        }
      });
    }
  }
  </script>