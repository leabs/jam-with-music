---
import Layout from "../layouts/Layout.astro";
---
<Layout>
  <div class="op1-drum-machine">
    <h1>Drum Machine</h1>
    
    <!-- BPM Control -->
    <div class="bpm-control">
      <label for="bpm">BPM:</label>
      <input type="number" id="bpm" value="120" min="40" max="300" />
      <button id="playBtn">Play</button>
      <!-- Share Button -->
      <button id="shareBtn">Share</button>
    </div>
    
    <!-- Sequencer (7 rows) -->
    <div class="sequencer">
      
      <!-- 1) Kick Row -->
      <div class="sequence-row">
        <div class="instrument-label">Kick</div>
        <div class="all-steps">
          <div class="steps" data-instrument="kick">
            <!-- 16 steps -->
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>

      <!-- 2) Snare -->
      <div class="sequence-row">
        <div class="instrument-label">Snare</div>
        <div class="all-steps">
          <div class="steps" data-instrument="snare">
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>

      <!-- 3) Hi-Hat -->
      <div class="sequence-row">
        <div class="instrument-label">Hi-Hat</div>
        <div class="all-steps">
          <div class="steps" data-instrument="hi_hat">
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>

      <!-- 4) Clap -->
      <div class="sequence-row">
        <div class="instrument-label">Clap</div>
        <div class="all-steps">
          <div class="steps" data-instrument="clap">
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>

      <!-- 5) Gun Cocked -->
      <div class="sequence-row">
        <div class="instrument-label">Gun Cocked</div>
        <div class="all-steps">
          <div class="steps" data-instrument="gunCocked">
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>

      <!-- 6) Gun Shot -->
      <div class="sequence-row">
        <div class="instrument-label">Shot</div>
        <div class="all-steps">
          <div class="steps" data-instrument="gunShot">
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>

      <!-- 7) Church Bell -->
      <div class="sequence-row">
        <div class="instrument-label">Church Bell</div>
        <div class="all-steps">
          <div class="steps" data-instrument="churchBell">
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>
    </div>

    <p class="warning">This is buggy, refresh the page if the drum machine stops playing.</p>
  </div>
</Layout>

<style>
/* Basic reset */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  background-color: #333;
  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
  color: #fff;
  width: 100%;
  min-height: 100vh;
}

/* Container for the drum machine */
.op1-drum-machine {
  width: 100%;
  margin: 0;
  padding: 0;
  background-color: #333;
  border: none;
  border-radius: 0;
  box-shadow: none;
}

.op1-drum-machine h1 {
  text-align: center;
  margin: 0.5rem 0;
}

/* BPM / Play Controls */
.bpm-control {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0.5rem 0;
  flex-wrap: wrap;
}

.bpm-control label {
  margin-right: 8px;
}

#bpm {
  width: 60px;
  text-align: center;
  margin-right: 12px;
  background-color: #555;
  color: #fff;
  border: 1px solid #888;
  border-radius: 4px;
  font-size: 16px; /* Prevent zoom on iOS */
}

#playBtn {
  background-color: #f57e7e;
  border: 2px solid #e05353;
  border-radius: 6px;
  cursor: pointer;
  color: #fff;
  padding: 6px 12px;
}

#shareBtn {
  background-color: #8bbcf5;
  border: 2px solid #5490e0;
  border-radius: 6px;
  cursor: pointer;
  color: #fff;
  padding: 6px 12px;
  margin-left: 8px;
}

/* Warning Message */
.warning {
  padding: 10px;
  margin-top: 40px;
  text-align: center;
}

/* Sequencer container just stacks the rows */
.sequencer {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  max-width: 1100px;
  margin: 0 auto;
}

/*
  Each row is a 2-column grid:
  - 1st col: small area for vertical label
  - 2nd col: .all-steps (the 16 steps)
*/
.sequence-row {
  display: grid;
  grid-template-columns: auto 1fr;
  align-items: center;
  gap: 0;
  max-height: 100px;
}

/* The label is rotated to save space. */
.instrument-label {
  width: 30px;
  display: flex;
  justify-content: center;
  align-items: center;
  transform: rotate(-90deg);
  transform-origin: center;
  white-space: nowrap;
  font-weight: bold;
  background-color: transparent;
  min-height: 50px;
  padding: 0.5rem 0;
  text-align: center;
}

/* The steps container gets all available space */
.all-steps {
  width: 100%;
}

/* 16 columns in one row by default */
.steps {
  display: grid;
  grid-template-columns: repeat(16, 1fr);
  gap: 2px;
  width: 100%;
}

.step {
  background-color: #444;
  border: 2px solid #666;
  cursor: pointer;
  aspect-ratio: 1 / 1;
  transition:
    background-color 0.1s ease,
    border-color 0.1s ease,
    outline 0.1s ease;
}

.step:nth-child(4n+1) {
  background-color: #3a3a3a;
}

.step.active {
  background-color: #5fa86b;
  border-color: #7dbe8a;
}

.step.active:nth-child(4n+1) {
  background-color: #529a60;
}

.step.playing {
  outline: 2px solid #ff8b00;
  outline-offset: -2px;
}

@media (max-width: 600px) {
  .steps {
    grid-template-columns: repeat(8, 1fr);
    gap: 0;
  }

  .instrument-label {
    width: 40px;
    min-height: 50px;
  }
}
</style>

<script>
/************************************************
 * script.js — Stopping playback if tab is hidden
 * plus base64 share logic with clipboard copy
 ************************************************/
let audioCtx;
try {
  audioCtx = new (window.AudioContext || window.webkitAudioContext)();
} catch (e) {
  alert('Web Audio API not supported in this browser');
}

// 7 instruments in a known order (for base64 encoding)
const instrumentsOrder = [
  'kick', 'snare', 'hi_hat', 'clap', 'gunCocked', 'gunShot', 'churchBell'
];

// Sample URLs (adjust your actual filenames)
const sampleURLs = {
  kick:      'kick.wav',
  snare:     'snare.wav',
  hi_hat:    'hi_hat.wav',
  clap:      'clap.wav',
  gunCocked: 'gun_cocked.wav',
  gunShot:   'gun_shot.wav',
  churchBell:'church_bell.wav'
};

const audioBuffers = {};

const bpmInput   = document.getElementById('bpm');
const playBtn    = document.getElementById('playBtn');
const shareBtn   = document.getElementById('shareBtn');
const stepContainers = document.querySelectorAll('.steps');

let isPlaying    = false;
let current16th  = 0;
let nextNoteTime = 0;
let rafId        = 0;

const scheduleAheadTime = 0.1; // schedule 100ms ahead

/*******************************
 * On window load
 *******************************/
window.addEventListener('load', async () => {
  playBtn.disabled = true;
  shareBtn.disabled = true;
  
  await loadAllSamples();
  playBtn.disabled = false;
  shareBtn.disabled = false;

  // Toggle .active on step click
  document.querySelectorAll('.step').forEach(step => {
    step.addEventListener('click', () => {
      step.classList.toggle('active');
    });
  });

  loadFromURLParams();
});

// Stop playback if tab goes inactive
document.addEventListener('visibilitychange', () => {
  if (document.hidden && isPlaying) {
    stopSequencer();
  }
});

/*******************************
 * Load samples
 *******************************/
async function loadAllSamples() {
  for (let instr of instrumentsOrder) {
    const url = sampleURLs[instr];
    try {
      const audioData = await fetch(url).then(r => r.arrayBuffer());
      audioBuffers[instr] = await audioCtx.decodeAudioData(audioData);
    } catch (error) {
      console.error(`Error loading sample for ${instr}:`, error);
    }
  }
  console.log('All samples loaded.');
}

/*******************************
 * Play / Stop
 *******************************/
playBtn.addEventListener('click', () => {
  if (!isPlaying) {
    startSequencer();
  } else {
    stopSequencer();
  }
});

function startSequencer() {
  if (audioCtx.state === 'suspended') {
    audioCtx.resume();
  }
  isPlaying = true;
  playBtn.textContent = 'Stop';
  current16th = 0;
  nextNoteTime = audioCtx.currentTime;
  schedulerLoop();
}

function stopSequencer() {
  isPlaying = false;
  playBtn.textContent = 'Play';
  cancelAnimationFrame(rafId);
  clearPlayingHighlight();
}

/*******************************
 * The Scheduling Loop
 *******************************/
function schedulerLoop() {
  while (nextNoteTime < audioCtx.currentTime + scheduleAheadTime) {
    scheduleStep(current16th, nextNoteTime);
    nextNote();
  }
  if (isPlaying) {
    rafId = requestAnimationFrame(schedulerLoop);
  }
}

function nextNote() {
  const bpmVal = parseInt(bpmInput.value) || 120;
  const secPerBeat = 60.0 / bpmVal;
  const secPer16th = secPerBeat / 4;
  nextNoteTime += secPer16th;
  current16th = (current16th + 1) % 16;
}

function scheduleStep(stepIndex, time) {
  stepContainers.forEach(container => {
    const instrument = container.getAttribute('data-instrument');
    const stepDiv = container.querySelector('[data-step="' + stepIndex + '"]');
    if (stepDiv && stepDiv.classList.contains('active')) {
      playSound(instrument, time);
    }
  });
  const delayMs = (time - audioCtx.currentTime) * 1000;
  setTimeout(() => highlightStep(stepIndex), delayMs);
}

function playSound(instrument, when) {
  const buf = audioBuffers[instrument];
  if (!buf) return;
  const source = audioCtx.createBufferSource();
  source.buffer = buf;
  source.connect(audioCtx.destination);
  source.start(when);
}

/*******************************
 * Visual Highlight
 *******************************/
function highlightStep(stepIndex) {
  clearPlayingHighlight();
  document.querySelectorAll('[data-step="' + stepIndex + '"]').forEach(el => {
    el.classList.add('playing');
  });
}

function clearPlayingHighlight() {
  document.querySelectorAll('.step.playing').forEach(el => {
    el.classList.remove('playing');
  });
}

/*******************************
 * Base64 Share Logic with Clipboard Copy
 *******************************/

// 2 bytes (16 bits) => pattern
function patternToBytes(patternStr) {
  // e.g. "1010000010100001" => parse binary => hi / lo
  const dec = parseInt(patternStr, 2);
  const hi  = (dec >> 8) & 0xFF;
  const lo  = dec & 0xFF;
  return [hi, lo];
}

function bytesToPattern(hi, lo) {
  const dec = (hi << 8) | lo;
  let bin = dec.toString(2);
  return bin.padStart(16, '0');
}

function arrayBufferToBase64(ab) {
  let str = '';
  const bytes = new Uint8Array(ab);
  for (let i = 0; i < bytes.length; i++) {
    str += String.fromCharCode(bytes[i]);
  }
  return btoa(str);
}

function base64ToArrayBuffer(b64) {
  const bin = atob(b64);
  const len = bin.length;
  const bytes = new Uint8Array(len);
  for (let i = 0; i < len; i++) {
    bytes[i] = bin.charCodeAt(i);
  }
  return bytes.buffer;
}

// SHARE BUTTON FUNCTIONALITY
shareBtn.addEventListener('click', async () => {
  try {
    // 1) If currently playing, stop the sequencer
    if (isPlaying) {
      stopSequencer();
    }

    // 2) Gather BPM
    const bpmVal = parseInt(bpmInput.value) || 120;

    // 3) Gather patterns for each instrument
    const data = new Uint8Array(instrumentsOrder.length * 2); // 2 bytes per instrument
    let offset = 0;

    for (let instr of instrumentsOrder) {
      const container = document.querySelector(`.steps[data-instrument="${instr}"]`);
      if (!container) {
        // If instrument row doesn't exist, skip
        offset += 2;
        continue;
      }

      // Build 16-bit pattern string
      let patternStr = '';
      for (let i = 0; i < 16; i++) {
        const stepDiv = container.querySelector('[data-step="' + i + '"]');
        patternStr += stepDiv.classList.contains('active') ? '1' : '0';
      }

      // Convert pattern to two bytes
      const [hi, lo] = patternToBytes(patternStr);
      data[offset++] = hi;
      data[offset++] = lo;
    }

    // 4) Convert data to Base64
    const b64 = arrayBufferToBase64(data.buffer);

    // 5) Build share URL
    const domain = window.location.origin; // Use current domain
    const params = new URLSearchParams();
    params.set('bpm', bpmVal.toString());
    params.set('b', b64);

    const shareUrl = `${domain}${window.location.pathname}?${params.toString()}`;

    // 6) Copy to clipboard
    await navigator.clipboard.writeText(shareUrl);

    // 7) Alert the user
    alert("Link to shared track was copied to your clipboard.");
  } catch (err) {
    console.error('Failed to copy: ', err);
    alert("Failed to copy the link. Please try manually.");
  }
});

/*******************************
 * Load from URL Params
 *******************************/
function loadFromURLParams() {
  const query = new URLSearchParams(window.location.search);
  
  // Load BPM
  if (query.has('bpm')) {
    bpmInput.value = query.get('bpm');
  }

  // Load patterns from Base64
  if (query.has('b')) {
    const b64 = query.get('b');
    const ab  = base64ToArrayBuffer(b64);
    const data = new Uint8Array(ab);
    
    if (data.length !== instrumentsOrder.length * 2) {
      console.warn('Unexpected data length, skipping load');
      return;
    }

    let offset = 0;
    for (let instr of instrumentsOrder) {
      const container = document.querySelector(`.steps[data-instrument="${instr}"]`);
      if (!container) {
        offset += 2;
        continue;
      }

      const hi = data[offset++];
      const lo = data[offset++];
      const patternStr = bytesToPattern(hi, lo);

      for (let i = 0; i < 16; i++) {
        const stepDiv = container.querySelector('[data-step="' + i + '"]');
        if (!stepDiv) continue;
        if (patternStr[i] === '1') {
          stepDiv.classList.add('active');
        } else {
          stepDiv.classList.remove('active');
        }
      }
    }
  }
}
</script>
