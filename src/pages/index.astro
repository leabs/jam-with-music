---
import Layout from "../layouts/Layout.astro";
import Songlist from "../components/Songlist.astro";

// We'll assume we have a serverless function at /api/save
const serverlessURL = "/api/save";
---

<Layout>
  <div class="op1-drum-machine">
    <h1>Drum Machine</h1>
    
    <!-- BPM Control -->
    <div class="bpm-control">
      <label for="bpm">BPM:</label>
      <input type="number" id="bpm" value="120" min="40" max="300" />
      <button id="playBtn">Play</button>
      <!-- Share Button -->
      <button id="shareBtn">Share</button>
    </div>
    
    <!-- Sequencer (rows) -->
    <div class="sequencer">
      <!-- 1) Kick Row -->
      <div class="sequence-row">
        <div class="instrument-label">Kick</div>
        <div class="all-steps">
          <div class="steps" data-instrument="kick">
            <!-- 16 steps -->
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>

      <!-- 2) Snare -->
      <div class="sequence-row">
        <div class="instrument-label">Snare</div>
        <div class="all-steps">
          <div class="steps" data-instrument="snare">
            <!-- 16 steps -->
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>

      <!-- 3) Hi-Hat -->
      <div class="sequence-row">
        <div class="instrument-label">Hi-Hat</div>
        <div class="all-steps">
          <div class="steps" data-instrument="hi_hat">
            <!-- 16 steps -->
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>

      <!-- 4) Clap -->
      <div class="sequence-row">
        <div class="instrument-label">Clap</div>
        <div class="all-steps">
          <div class="steps" data-instrument="clap">
            <!-- 16 steps -->
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>

      <!-- 5) Vocal -->
      <div class="sequence-row">
        <div class="instrument-label">Vocal</div>
        <div class="all-steps">
          <div class="steps" data-instrument="vocal_shot">
            <!-- 16 steps -->
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>

      <!-- 6) Bass -->
      <div class="sequence-row">
        <div class="instrument-label">Bass</div>
        <div class="all-steps">
          <div class="steps" data-instrument="bass_hit">
            <!-- 16 steps -->
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>

      <!-- 7) Rattle -->
      <div class="sequence-row">
        <div class="instrument-label">Rattle</div>
        <div class="all-steps">
          <div class="steps" data-instrument="rattle">
            <!-- 16 steps -->
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>

      <!-- 8) Pad -->
      <div class="sequence-row">
        <div class="instrument-label">Hit</div>
        <div class="all-steps">
          <div class="steps" data-instrument="pad">
            <!-- 16 steps -->
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>

      <!-- 9) Gun Cocked -->
      <div class="sequence-row">
        <div class="instrument-label">Cocked</div>
        <div class="all-steps">
          <div class="steps" data-instrument="gunCocked">
            <!-- 16 steps -->
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>

      <!-- 10) Gun Shot -->
      <div class="sequence-row">
        <div class="instrument-label">Shot</div>
        <div class="all-steps">
          <div class="steps" data-instrument="gunShot">
            <!-- 16 steps -->
            <div class="step" data-step="0"></div>
            <div class="step" data-step="1"></div>
            <div class="step" data-step="2"></div>
            <div class="step" data-step="3"></div>
            <div class="step" data-step="4"></div>
            <div class="step" data-step="5"></div>
            <div class="step" data-step="6"></div>
            <div class="step" data-step="7"></div>
            <div class="step" data-step="8"></div>
            <div class="step" data-step="9"></div>
            <div class="step" data-step="10"></div>
            <div class="step" data-step="11"></div>
            <div class="step" data-step="12"></div>
            <div class="step" data-step="13"></div>
            <div class="step" data-step="14"></div>
            <div class="step" data-step="15"></div>
          </div>
        </div>
      </div>
    </div>

    <Songlist />
  </div>
</Layout>

<style>
/* Basic reset */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  background-color: #333;
  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
  color: #fff;
  width: 100%;
  min-height: 100vh;
}

/* Container for the drum machine */
.op1-drum-machine {
  width: 100%;
  margin: 0;
  padding: 0;
  background-color: #333;
  border: none;
  border-radius: 0;
  box-shadow: none;
}

.op1-drum-machine h1 {
  text-align: center;
  margin: 0.5rem 0;
}

/* BPM / Play Controls */
.bpm-control {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0.5rem 0;
  flex-wrap: wrap;
}

.bpm-control label {
  margin-right: 8px;
}

#bpm {
  width: 60px;
  text-align: center;
  margin-right: 12px;
  background-color: #555;
  color: #fff;
  border: 1px solid #888;
  border-radius: 4px;
  font-size: 16px; /* Prevent zoom on iOS */
}

#playBtn {
  background-color: #f57e7e;
  border: 2px solid #e05353;
  border-radius: 6px;
  cursor: pointer;
  color: #fff;
  padding: 6px 12px;
}

#shareBtn {
  background-color: #8bbcf5;
  border: 2px solid #5490e0;
  border-radius: 6px;
  cursor: pointer;
  color: #fff;
  padding: 6px 12px;
  margin-left: 8px;
}

/* Sequencer container just stacks the rows */
.sequencer {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  max-width: 1100px;
  margin: 0 auto;
}

/*
  Each row is a 2-column grid:
  - 1st col: small area for vertical label
  - 2nd col: .all-steps (the 16 steps)
*/
.sequence-row {
  display: grid;
  grid-template-columns: auto 1fr;
  align-items: center;
  gap: 0;
  max-height: 100px;
}

/* The label is rotated to save space. */
.instrument-label {
  width: 30px;
  display: flex;
  justify-content: center;
  align-items: center;
  transform: rotate(-90deg);
  transform-origin: center;
  white-space: nowrap;
  font-weight: bold;
  background-color: transparent;
  min-height: 50px;
  padding: 0.5rem 0;
  text-align: center;
}

/* The steps container gets all available space */
.all-steps {
  width: 100%;
}

/* 16 columns in one row by default */
.steps {
  display: grid;
  grid-template-columns: repeat(16, 1fr);
  gap: 2px;
  width: 100%;
}

.step {
  background-color: #444;
  border: 2px solid #666;
  cursor: pointer;
  aspect-ratio: 1 / 1;
  transition:
    background-color 0.1s ease,
    border-color 0.1s ease,
    outline 0.1s ease;
}

.step:nth-child(4n+1) {
  background-color: #3a3a3a;
}

.step.active {
  background-color: #5fa86b;
  border-color: #7dbe8a;
}

.step.active:nth-child(4n+1) {
  background-color: #529a60;
}

.step.playing {
  outline: 2px solid #ff8b00;
  outline-offset: -2px;
}

@media (max-width: 600px) {
  .steps {
    grid-template-columns: repeat(8, 1fr);
    gap: 0;
  }

  .instrument-label {
    width: 40px;
    min-height: 50px;
  }
}
</style>

<script>
let audioCtx;
try {
  audioCtx = new (window.AudioContext || window.webkitAudioContext)();
} catch (e) {
  alert('Web Audio API not supported in this browser');
}

/**
 * The order used for sample loading.
 * You can add more instruments here in the future.
 * Old short-code links won't break
 * because the serverless approach doesn't rely on a fixed array length in the URL.
 */
const instrumentsOrder = [
  'kick',
  'snare',
  'hi_hat',
  'clap',
  'gunCocked',
  'gunShot',
  'rattle',
  'vocal_shot',
  'bass_hit',
  'pad'
];

const sampleURLs = {
  kick:      'kick.mp3',
  snare:     'snare.mp3',
  hi_hat:    'hi_hat.mp3',
  clap:      'clap.mp3',
  gunCocked: 'gun_cocked.mp3',
  gunShot:   'gun_shot.mp3',
  rattle:    'rattle.mp3',
  vocal_shot:'vocal_shot.mp3',
  bass_hit:  'bass_hit.mp3',
  pad:       'pad.mp3'
};

const audioBuffers = {};

const bpmInput       = document.getElementById('bpm');
const playBtn        = document.getElementById('playBtn');
const shareBtn       = document.getElementById('shareBtn');
const stepContainers = document.querySelectorAll('.steps');

let isPlaying    = false;
let current16th  = 0;
let nextNoteTime = 0;
let schedulerIntervalId = null;

const scheduleInterval = 25; // ms

/*******************************
 * On window load
 *******************************/
window.addEventListener('load', async () => {
  playBtn.disabled = true;
  shareBtn.disabled = true;
  
  await loadAllSamples();
  playBtn.disabled = false;
  shareBtn.disabled = false;

  document.querySelectorAll('.step').forEach(step => {
    step.addEventListener('click', () => {
      step.classList.toggle('active');
    });
  });

  // If there's a short code (?s=xyz) in the URL, load data from the serverless function
  loadFromShortURL();
});

/*******************************
 * Load samples
 *******************************/
async function loadAllSamples() {
  for (let instr of instrumentsOrder) {
    const url = sampleURLs[instr];
    try {
      const response = await fetch(url);
      if (!response.ok) throw new Error(`Failed to fetch ${url}: ${response.statusText}`);
      const audioData = await response.arrayBuffer();
      audioBuffers[instr] = await audioCtx.decodeAudioData(audioData);
    } catch (error) {
      console.error(`Error loading sample for ${instr}:`, error);
    }
  }
}

/*******************************
 * Play / Stop
 *******************************/
playBtn.addEventListener('click', () => {
  if (!isPlaying) {
    startSequencer();
  } else {
    stopSequencer();
  }
});

function startSequencer() {
  if (audioCtx.state === 'suspended') {
    audioCtx.resume();
  }
  isPlaying = true;
  playBtn.textContent = 'Stop';
  current16th = 0;
  nextNoteTime = audioCtx.currentTime;
  schedulerLoop();
}

function stopSequencer() {
  isPlaying = false;
  playBtn.textContent = 'Play';
  clearInterval(schedulerIntervalId);
  schedulerIntervalId = null;
  clearPlayingHighlight();
}

/*******************************
 * Scheduler Loop
 *******************************/
function schedulerLoop() {
  if (schedulerIntervalId) return;
  schedulerIntervalId = setInterval(() => {
    while (nextNoteTime < audioCtx.currentTime + 0.1) {
      scheduleStep(current16th, nextNoteTime);
      nextNote();
    }
  }, scheduleInterval);
}

function nextNote() {
  const bpmVal = parseInt(bpmInput.value) || 120;
  const secPerBeat = 60.0 / bpmVal;
  const secPer16th = secPerBeat / 4;
  nextNoteTime += secPer16th;
  current16th = (current16th + 1) % 16;
}

function scheduleStep(stepIndex, time) {
  stepContainers.forEach(container => {
    const instrument = container.getAttribute('data-instrument');
    const stepDiv = container.querySelector(`[data-step="${stepIndex}"]`);
    if (stepDiv && stepDiv.classList.contains('active')) {
      playSound(instrument, time);
    }
  });
  // Schedule highlight
  setTimeout(() => highlightStep(stepIndex), (time - audioCtx.currentTime) * 1000);
}

function playSound(instrument, when) {
  const buf = audioBuffers[instrument];
  if (!buf) return;
  const source = audioCtx.createBufferSource();
  source.buffer = buf;
  source.connect(audioCtx.destination);
  source.start(when);
}

function highlightStep(stepIndex) {
  clearPlayingHighlight();
  document.querySelectorAll(`[data-step="${stepIndex}"]`).forEach(el => {
    el.classList.add('playing');
  });
}

function clearPlayingHighlight() {
  document.querySelectorAll('.step.playing').forEach(el => {
    el.classList.remove('playing');
  });
}

/*******************************
 * Share Logic (serverless)
 *******************************/
shareBtn.addEventListener('click', async () => {
  try {
    if (isPlaying) stopSequencer();

    // Gather data
    const dataObj = {
      bpm: parseInt(bpmInput.value) || 120,
      patterns: {}
    };
    instrumentsOrder.forEach(instr => {
      const container = document.querySelector(`.steps[data-instrument="${instr}"]`);
      if (!container) return;
      let pat = '';
      for (let i = 0; i < 16; i++) {
        const stepDiv = container.querySelector(`[data-step="${i}"]`);
        pat += (stepDiv && stepDiv.classList.contains('active')) ? '1' : '0';
      }
      dataObj.patterns[instr] = pat;
    });

    // Save to serverless function => returns a short code
    const res = await fetch("${serverlessURL}", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(dataObj),
    });
    const result = await res.json();

    if (!result || !result.shortId) {
      throw new Error("No shortId returned from server");
    }

    // Build short URL: e.g. ?s=ABC123
    const domain = window.location.origin;
    const shortURL = `${domain}${window.location.pathname}?s=${result.shortId}`;

    // Copy to clipboard
    if (navigator.clipboard && navigator.clipboard.writeText) {
      await navigator.clipboard.writeText(shortURL);
    } else {
      const tempInput = document.createElement('input');
      tempInput.value = shortURL;
      document.body.appendChild(tempInput);
      tempInput.select();
      tempInput.setSelectionRange(0, 99999);
      document.execCommand('copy');
      document.body.removeChild(tempInput);
    }
    alert("Short link copied to clipboard!");
  } catch (err) {
    console.error("Share failed:", err);
    alert("Failed to share. Check console for details.");
  }
});

/*******************************
 * Load from short code
 *******************************/
async function loadFromShortURL() {
  const query = new URLSearchParams(window.location.search);
  if (!query.has('s')) return; // no short code
  const shortId = query.get('s');
  try {
    const response = await fetch("${serverlessURL}?id=" + shortId);
    if (!response.ok) {
      console.warn("No data found for short code:", shortId);
      return;
    }
    const dataObj = await response.json();

    // Set BPM
    if (dataObj.bpm) {
      bpmInput.value = dataObj.bpm;
    }

    // Set Patterns
    if (dataObj.patterns) {
      for (let instr of Object.keys(dataObj.patterns)) {
        const container = document.querySelector(`.steps[data-instrument="${instr}"]`);
        if (!container) continue;
        const pat = dataObj.patterns[instr];
        for (let i = 0; i < 16; i++) {
          const stepDiv = container.querySelector(`[data-step="${i}"]`);
          if (!stepDiv) continue;
          if (pat[i] === '1') stepDiv.classList.add('active');
          else stepDiv.classList.remove('active');
        }
      }
    }
  } catch (err) {
    console.error("Error loading short code data:", err);
  }
}
</script>